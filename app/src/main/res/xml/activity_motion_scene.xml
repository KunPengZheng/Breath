<?xml version="1.0" encoding="utf-8"?>
<MotionScene xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    app:defaultDuration="500">

    <!--
        defaultDuration:未指定时间的动画的默认时间，默认为300毫秒。
    -->

    <!-- 开始动画 -->
    <ConstraintSet android:id="@+id/start">
        <!--执行动画的控件id一定要写，要和布局中的id一致；宽高也要写，不然没效果；
            会覆盖布局中设置的属性；
        -->
        <Constraint
            android:id="@id/view1"
            android:layout_width="50dp"
            android:layout_height="50dp"
            android:layout_marginTop="50dp"
            app:layout_constraintLeft_toLeftOf="parent"
            app:layout_constraintRight_toRightOf="parent"
            app:layout_constraintTop_toTopOf="parent">

            <!--
                CustomAttribute：自定义属性，支持任意自定义的属性，常见的有 TextView 的 textColor、background
                 或者是 ImageView 的 src 、tint 等。当然还不止这些，我们平时自定义 View 中提供的自定义属性同样支持哦。

                 attributeName：对应控件中拥有"set + 属性名字"的方法（内部通过反射获取方法名，然后使用反射调用），
                                这种功能其实属性动画就有了。
            -->
            <CustomAttribute
                app:attributeName="backgroundColor"
                app:customColorValue="@color/colorFFFF5722" />

        </Constraint>

        <Constraint
            android:id="@id/view2"
            android:layout_width="50dp"
            android:layout_height="50dp"
            android:layout_marginTop="50dp"
            app:layout_constraintLeft_toLeftOf="parent"
            app:layout_constraintTop_toTopOf="parent">

            <CustomAttribute
                app:attributeName="backgroundColor"
                app:customColorValue="@color/colorFFFF5722" />

        </Constraint>

    </ConstraintSet>

    <!-- 结束动画 -->
    <ConstraintSet android:id="@+id/end">
        <!--执行动画的控件，id一定要写，要和布局中的id一致；宽高也要写，不然没效果-->
        <Constraint
            android:id="@id/view1"
            android:layout_width="50dp"
            android:layout_height="50dp"
            android:layout_marginBottom="50dp"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintLeft_toLeftOf="parent"
            app:layout_constraintRight_toRightOf="parent">

            <CustomAttribute
                app:attributeName="backgroundColor"
                app:customColorValue="@color/colorFF8BC34A" />

        </Constraint>

        <Constraint
            android:id="@id/view2"
            android:layout_width="10dp"
            android:layout_height="10dp"
            android:layout_marginLeft="20dp"
            android:layout_marginBottom="50dp"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintLeft_toLeftOf="parent">

            <CustomAttribute
                app:attributeName="backgroundColor"
                app:customColorValue="@color/colorFF8BC34A" />

        </Constraint>

    </ConstraintSet>


    <!--
    MotionScene根标签 必须包含Transition标签，可以有多个Transition标签。Transition标签是用来指定动画的开始和
    结束状态、任何中间状态以及触发动画的动作，可以理解为一个Transition标签对应一个动画。

    constraintSetStart:指定动画初始状态；
    constraintSetEnd:指定动画结束状态；
    duration:指定动画时长；
    autoTransition:是否自动开启动画。取值有：animateToStart过渡到初始状态、animateToEnd过渡到结束状态、
                jumpToEnd跳到结束状态、jumpToStart跳到初始状态、none不开始状态。默认情况下是none,当设为其他值时，
                不用和用户交互即自动开启动画。
    motionInterpolator:插值器。取值有：linear线性(匀速)、bounce弹簧、easeIn淡入（缓慢开始）、easeOut淡出（缓慢结束）、easeInOut淡入淡出(缓慢开始和结束);
    transitionDisable：允许动画功能。取值：false和true；
    layoutDuringTransition:动画过程中，MotionLayout子View调用reqeustLayout，是否做出响应。
                            取值honorRequest响应、ignoreRequest忽略；
    -->
    <Transition
        app:constraintSetEnd="@id/end"
        app:constraintSetStart="@id/start"
        app:duration="5000"
        app:motionInterpolator="linear">

        <!--
        targetId:指定点击触发动画的控件
        clickAction：响应用户的操作。toggle：初始和结束状态循环切换；transitionToStart:过渡到开始状态；
                    transitionToEnd:过渡到结束状态；jumpToStart:直接跳到开始状态；jumpToEnd: 直接跳到结束状态。
                    其实这里和Transition标签的autoTransition属性类似。只是前者是手动触发，后者是自动触发
        -->
        <OnClick
            app:clickAction="toggle"
            app:targetId="@id/view1" />

        <!-- 关键帧：KeyFrameSet标签：用来指定"某个中间状态"的位置和属性。其实和过渡动画的关键帧是一样的概念。
        KeyFrameSet标签含有KeyPosition和KeyAttribute两个子标签，这些共同构成过渡动画过程中某特殊状态的位置和属性。

        KeyPosition位置关键帧，侧重的是改变动画的轨迹：
        framePosition：关键帧位置，把整个运动动画分成100个位置，取值0到99，那么初始状态的位置就是0，结束状态就是99。
        keyPositionType：参考坐标系的选择，决定了percentX和percentY属性取值的结果。
                        1.parentRelative：以整个 MotionLayout 的布局为坐标系，左上角为坐标原点（参考 View 的坐标系即可）
                        2.deltaRelative：坐标系选择参照整个过渡动画的位置，那么起始状态的位置就是原点（0,0），
                          结束状态的位置就是终点（1,1）（但是以我们demo为例子，结束状态的x轴没有发生偏移，所以
                          以这种模式去设置percentX是没有效果的）；
                        3.pathRelative:坐标系选择参照整个运动路径，即起始和终点的直线距离构成X轴，此时y轴就有正
                        负之分，表示在X轴的左边还是右边。x轴和y轴的长度都是等于路径的长度。
       percentX、percentY：设置关键帧位置的偏移量，取值一般为 0 — 1，当然也可以设置为负数或者大于一。

        percentWidth和percentHeight属性表示视图自身大小，如果整个动画过程中，视图大小不存在变化，是没有效果的。
        将正方形在起始状态和结束状态的大小改为不一致，就可以看到效果，percentWidth和percentHeight属性会导致
        sizePercent属性失效。

        KeyAttribute属性关键帧，侧重的是更改 View 自身的属性，即所谓的”高矮胖瘦“:
         -->
        <KeyFrameSet>
            <KeyPosition
                app:framePosition="25"
                app:keyPositionType="parentRelative"
                app:motionTarget="@id/view1"
                app:percentX="0.25"
                app:percentY="0.25" />

            <KeyPosition
                app:framePosition="75"
                app:keyPositionType="parentRelative"
                app:motionTarget="@id/view1"
                app:percentX="0.75"
                app:percentY="0.75" />

            <!--            <KeyPosition-->
            <!--                app:framePosition="90"-->
            <!--                app:motionTarget="@id/view2"-->
            <!--                app:percentHeight="1"-->
            <!--                app:percentWidth="0" />-->

            <!--            <KeyAttribute-->
            <!--                android:rotation="90"-->
            <!--                app:framePosition="50"-->
            <!--                app:motionTarget="@id/view2" />-->

            <!--            <KeyAttribute-->
            <!--                android:rotationX="90"-->
            <!--                app:framePosition="50"-->
            <!--                app:motionTarget="@id/view2" />-->

            <!--            <KeyAttribute-->
            <!--                android:rotationY="90"-->
            <!--                app:framePosition="50"-->
            <!--                app:motionTarget="@id/view2" />-->

            <!--            <KeyAttribute-->
            <!--                android:alpha="0"-->
            <!--                app:framePosition="50"-->
            <!--                app:motionTarget="@id/view2" />-->

            <!--            <KeyAttribute-->
            <!--                android:scaleX="0"-->
            <!--                app:framePosition="50"-->
            <!--                app:motionTarget="@id/view2" />-->

            <!--            <KeyAttribute-->
            <!--                android:scaleY="0"-->
            <!--                app:framePosition="50"-->
            <!--                app:motionTarget="@id/view2" />-->


            <!--            <KeyAttribute-->
            <!--                android:translationX="90dp"-->
            <!--                app:framePosition="50"-->
            <!--                app:motionTarget="@id/view2" />-->

            <!--            <KeyAttribute-->
            <!--                android:translationY="90dp"-->
            <!--                app:framePosition="50"-->
            <!--                app:motionTarget="@id/view2" />-->

            <!--            <KeyAttribute-->
            <!--                android:translationZ="90dp"-->
            <!--                app:framePosition="50"-->
            <!--                app:motionTarget="@id/view2" />-->


        </KeyFrameSet>

    </Transition>

</MotionScene>
