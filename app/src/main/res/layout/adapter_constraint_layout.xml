<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <!--
    layout_constraintDimensionRatio: 宽高比，设置其中一方具体值(match_parent，wrap_content，xxdp),
    那么另外一方就会按照比率进行计算得出。如果宽高都设置为match_parent和wrap_content该属性则失效。


    位置偏向：让view的位置偏向某一侧（百分比），其实相当于margin（具体值）。
    layout_constraintHorizontal_bias：水平偏向,0到1之间(0表示最左边，1表示最右边),需要配合
        layout_constraintLeft_toLeftOf和layout_constraintRight_toRightOf才能生效

    layout_constraintVertical_bias：竖直偏向,0到1之间（0表示最上边，1表示最下边）,需要配合
        layout_constraintTop_toTopOf和layout_constraintBottom_toBottomOf才能生效
    -->
    <Button
        android:id="@+id/btn1"
        android:layout_width="150dp"
        android:layout_height="0dp"
        android:text="宽高比2：1"
        app:layout_constraintDimensionRatio="2:1"
        app:layout_constraintHorizontal_bias="0.3"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent"
        app:layout_constraintTop_toTopOf="parent" />


    <!--
    如果宽和高都设置为0dp（MATCH_CONSTRAINT），那么layout_constraintDimensionRatio的值需要先加一个"W,
    "或者"H,"来表示约束宽度或高度,下面的例子是首先宽度将满足父布局的约束，然后将按照16：9的比例设置高度
    -->


    <!--
    ConstraintLayout还能使用百分比来设置view的宽高，要使用百分比，宽或高同样要设置为0dp（MATCH_CONSTRAINT）。
    然后设置以下属性即可：
    app:layout_constraintWidth_default="percent" //设置宽为百分比，可省略
    app:layout_constraintWidth_percent="0.3" //0到1之间的值
    或
    app:layout_constraintHeight_default="percent" //设置高为百分比，可省略
    app:layout_constraintHeight_percent="0.3" //0到1之间的值
    -->
    <Button
        android:id="@+id/btn2"
        android:layout_width="0dp"
        android:layout_height="0dp"
        android:text="宽高比：H,16:9"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintDimensionRatio="H,16:9"
        app:layout_constraintHorizontal_bias="0.0"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintVertical_bias="0.498" />

    <Button
        android:id="@+id/btn_barrier1"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="btn_barrier1"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintTop_toBottomOf="@id/btn2" />

    <Button
        android:id="@+id/btn_barrier2"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:padding="20dp"
        android:text="btn_barrier2"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintTop_toBottomOf="@id/btn_barrier1" />

    <!--
        Barrier是一个看不见的视图，就像一个屏障一样阻止一个或者多个控件越过自己，当某个控件要越过自己的时候，Barrier
        会自动移动，避免自己被覆盖。

        假设有三个控件，A、B在左边且宽度不固定，C控件需要在A、B控件的右边,因为A和B的宽度都是不固定的所以要借助于Barrier，
        否则只能动态计算A、B的宽或者高然后根据最大的宽或者高去重新指定约束关系。

        constraint_referenced_ids：资源id。
        barrierDirection：相对于constraint_referenced_ids的方向。
    -->
    <androidx.constraintlayout.widget.Barrier
        android:id="@+id/barrier"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        app:barrierDirection="right"
        app:constraint_referenced_ids="btn_barrier1,btn_barrier2" />

    <Button
        android:id="@+id/btn_barrier3"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginLeft="5dp"
        android:gravity="center"
        android:padding="12dp"
        android:text="btn_barrier3"
        app:layout_constraintLeft_toRightOf="@id/barrier"
        app:layout_constraintTop_toTopOf="@id/btn_barrier1" />

    <Button
        android:id="@+id/btn3"
        android:layout_width="0dp"
        android:layout_height="0dp"
        android:text="百分比"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintHeight_default="percent"
        app:layout_constraintHeight_percent="0.1"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent"
        app:layout_constraintWidth_default="percent"
        app:layout_constraintWidth_percent="0.7" />

    <Button
        android:id="@+id/btn_gone_margin1"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginBottom="5dp"
        android:text="goneMargin1"
        android:visibility="gone"
        app:layout_constraintBottom_toTopOf="@id/btn3"
        app:layout_constraintLeft_toLeftOf="parent" />

    <!--
        layout_goneMarginStart
        layout_goneMarginEnd
        layout_goneMarginLeft
        layout_goneMarginTop
        layout_goneMarginRight
        layout_goneMarginBottom

        当依赖的控件的可见行为gone后，使用上面的属性后能够保持对应的margin。
    -->
    <Button
        android:id="@+id/btn_gone_margin2"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginLeft="20dp"
        android:layout_marginBottom="5dp"
        android:text="goneMargin2"
        app:layout_constraintBottom_toTopOf="@id/btn3"
        app:layout_constraintLeft_toRightOf="@id/btn_gone_margin1"
        app:layout_goneMarginLeft="100dp" />


    <!--
    权重：
    app:layout_constraintHorizontal_weight //水平权重，需要配合上下约束才能生效
    app:layout_constraintVertical_weight //竖直权重，需要配合左右约束才能生效
    -->
    <Button
        android:id="@+id/btn4"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text="权重1"
        app:layout_constraintHorizontal_weight="1"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toLeftOf="@id/btn5"
        app:layout_constraintTop_toBottomOf="@id/btn1" />

    <Button
        android:id="@+id/btn5"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text="权重2"
        app:layout_constraintHorizontal_weight="1"
        app:layout_constraintLeft_toRightOf="@id/btn4"
        app:layout_constraintRight_toLeftOf="@id/btn6"
        app:layout_constraintTop_toBottomOf="@id/btn1" />

    <Button
        android:id="@+id/btn6"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text="权重3"
        app:layout_constraintHorizontal_weight="1"
        app:layout_constraintLeft_toRightOf="@id/btn5"
        app:layout_constraintRight_toRightOf="parent"
        app:layout_constraintTop_toBottomOf="@id/btn1" />


    <!--
    链：
    app:layout_constraintVertical_chainStyle="spread|spread_inside|packed"
    app:layout_constraintHorizontal_chainStyle="spread|spread_inside|packed"
    需要配合左右/上下约束才能生效，宽或高非0即可，默认是spread（所以可以不用设置）,置用一个控件设置即可。

    详情见项目的doc文件的"约束布局的链模式.png"
    -->
    <Button
        android:id="@+id/btn7"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="链1"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toLeftOf="@id/btn8"
        app:layout_constraintTop_toBottomOf="@id/btn4" />

    <Button
        android:id="@+id/btn8"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="链2"
        app:layout_constraintLeft_toRightOf="@id/btn7"
        app:layout_constraintRight_toLeftOf="@id/btn9"
        app:layout_constraintTop_toBottomOf="@id/btn4" />

    <Button
        android:id="@+id/btn9"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="链3"
        app:layout_constraintLeft_toRightOf="@id/btn8"
        app:layout_constraintRight_toRightOf="parent"
        app:layout_constraintTop_toBottomOf="@id/btn4" />


    <!--
     Guideline辅助线:(辅助布局，并不会显示到ui上)
     android:orientation=”horizontal|vertical”表示是水平或垂直引导线。
     app:layout_constraintGuide_begin, 如果是水平引导线，则距离布局顶部多少dp，如果是垂直引导线，则距离布局左边多少dp。
     app:layout_constraintGuide_end,如果是水平引导线，则距离布局底部多少dp，如果是垂直引导线，则距离布局多少30dp
     app:layout_constraintGuide_percent=”0.5”,同上面一样的效果，只是是按百分比，取值为0-1
     -->
    <androidx.constraintlayout.widget.Guideline
        android:id="@+id/guideline"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        app:layout_constraintGuide_percent="0.5" />


</androidx.constraintlayout.widget.ConstraintLayout>